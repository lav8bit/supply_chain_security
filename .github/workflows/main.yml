name: Generate SBOM Report and Validate Security

on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  validate-and-scan:
    name: Validate Kubernetes YAMLs and Scan for Vulnerabilities
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout Repository
    - name: Checkout Repository
      uses: actions/checkout@v3

    # Step 2: Define Image and Tarball Variables
    - name: Set Image and Tarball Variables
      run: |
        echo "IMAGE=docker.io/library/nginx:1.14.2" >> $GITHUB_ENV
        echo "TAR=nginx_1.14.2.tar" >> $GITHUB_ENV

    # Step 3: Generate SBOM with Anchore SBOM Action
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.IMAGE }}
        artifact-name: sbom.spdx

    # Step 4: Retrieve Image Digest with Syft
    - name: Retrieve Image Digest with Syft
      run: |
        syft ${{ env.IMAGE }} -o json > sbom.json
        DIGEST=$(cat sbom.json | jq -r '.artifact.metadata.imageDigest')
        echo "Digest: $DIGEST"
        echo "DIGEST=$DIGEST" >> $GITHUB_ENV
      env:
        SYFT_CACHE_DIR: ./syft-cache

    # Step 5: Upload SBOM Artifact
    - name: Upload SBOM Artifact
      uses: actions/upload-artifact@v4
      with:
        name: sbom-report
        path: sbom.json

    # Step 6: Lint Kubernetes Manifests Using KubeLinter
    - name: Scan YAMLs
      id: kube-lint-scan
      uses: stackrox/kube-linter-action@v1
      with:
        directory: manifest

    # Step 7: Scan Kubernetes Manifests With KubeSec
    - name: Run kubesec scanner
      uses: controlplaneio/kubesec-action@master
      with:
        input: manifest/nginx-deployment.yaml

    # Step 8: Generate Tarball from Image
    - name: Generate Tarball from Image
      run: |
        docker pull ${{ env.IMAGE }}
        docker save -o ${{ env.TAR }} ${{ env.IMAGE }}

    # Step 9: Run Trivy Vulnerability Scanner in Tarball Mode
    - name: Run Trivy Vulnerability Scanner in Tarball Mode
      uses: aquasecurity/trivy-action@0.28.0
      with:
        input: ${{ env.TAR }}
        format: 'table'                      # Output format in a table for readability
        exit-code: '1'                       # Fail the workflow on detecting vulnerabilities
        ignore-unfixed: true                 # Ignore vulnerabilities without available fixes
        vuln-type: 'os,library'              # Scan OS packages and libraries
        severity: 'CRITICAL,HIGH'